const Discord = require("discord.js");
const {
    Client,
    Message,
    MessageActionRow,
    MessageButton,
} = require("discord.js");

module.exports = {
    name: 'emergency',
    description: 'In the event of large-scale vandalism, this command may be used.',
    async execute(message, args, Discord) {
        //Time Variable
        let currentDate = new Date();
        let time = currentDate.getHours() + ":" + currentDate.getMinutes();

        //Roles Mentions
        const ReportPings = message.guild.roles.cache.find(role => role.name == "Report Pings");

        //Errors Handling
        if (message.member.roles.cache.has('883830761097162752')) {
            return message.channel.send('`ERROR: API reports that the user is blacklisted from using the %emergency command.`');
        } else if (!message.member.roles.cache.has('791024545091420190')) {
            return message.channel.send(`${message.author} sorry but you need to be trusted to use this`);
        } else if (!args.length) {
            return message.channel.send(`${message.author} dude we can't figure this out by ourselves
            
%emergency <URL(s) of user(s)>
Separate each URL with a space.`);
        } else if (args[0] === undefined) {
            return message.channel.send('`ERROR: API reports that the user did not send a valid argument.`');
        } else if (!args[0].startsWith('https://jtoh.fandom.com/wiki/User:')) {
            return message.channel.send('`ERROR: API reports that one of the users arguments is not a valid URL.`')
        }

        //Confirmation Embed
        const confirmationEmbed = new Discord.MessageEmbed()
        .setColor('#FF0000')
        .addFields(
            {name: 'WARNING!', value: 'You are about to initiate the emergency command. This will ping everyone with the Report Pings role. This should only be used in heavy and/or active incidences of spam/vandalism, and misuse of this command WILL result in an immediate blacklist. **Are you sure you would like to do this?**'},
        )
        .setFooter(`Today at ${time}`);

        //Cancelled Embed 
        const cancelEmbed = new Discord.MessageEmbed()
        .setColor('#337800')
        .addFields(
            {name: 'Action Initiated', value: 'This interaction has been cancelled.'},
        )
        .setFooter(`Today at ${time}`);

        //Confirmation Buttons
        const confirmButtons = new MessageActionRow().addComponents(
            new Discord.MessageButton()
            .setCustomId("primary")
            .setLabel('Create Emergency Report')
            .setStyle("DANGER"),

            new Discord.MessageButton()
            .setCustomId("secondary")
            .setLabel('Cancel Report')
            .setStyle("SUCCESS")
        );

        //Main Embed
        const emergencyEmbed = new Discord.MessageEmbed()
        .setColor('#FF0000')
        .setTitle('EMERGENCY REPORT')
        .setURL(`${args[0]}`)
        .setDescription(`New emergency report generated by ${message.author}`)
        .addFields(
            {name: 'Reported User(s)', value: `${args}`},
            {name: 'Reporter', value: `${message.author}`},
            {name: 'Attention Staff', value: `${ReportPings}`}
        )
        .setFooter(`Today at ${time}`);

        const msg = await message.reply({ embeds: [confirmationEmbed], components: [confirmButtons]})
            
        const iFilter = i => i.user.id === message.author.id;

        const collector = msg.createMessageComponentCollector({ filter: iFilter });

        collector.on('collect', async i => {
            if (i.customId === "primary") {
                msg.edit({ content: `New Report, ${ReportPings}`, embeds: [emergencyEmbed], components: [] });
                return;
            } else if (i.customId === "secondary") {
                msg.edit({embeds: [cancelEmbed], components: [] });
                return;
            }
        });
    }
}